// Tenemos que crear una funci√≥n que recibe el n√∫mero de c√©ntimos que hay que devolver al cliente y la funci√≥n nos da un array con la combinaci√≥n de monedas m√≠nimas que debemos usar para conseguirlo.
// La dificultad del reto est√° en saber utilizar correctamente una estructura que te permita conocer las monedas que tienes disponible para crear el array con la devoluci√≥n, ya que debes usar siempre el menor n√∫mero de monedas posible. ¬°Suerte üë©‚Äçüíªüë®‚Äçüíª!.
export default function getCoins(change) {
  // Paso 1: definimos las denominaciones
  const valoresDesc = [50, 20, 10, 5, 2, 1];
  // Aqu√≠ guardaremos cu√°ntas monedas de cada valor usamos
  const contador = {
    1: 0,
    2: 0,
    5: 0,
    10: 0,
    20: 0,
    50: 0
  };

  
  let resto = change;
  for (let valor of valoresDesc) {
    const cantidad = Math.floor(resto / valor);
    // console.log(resto / valor, cantidad)
    // console.log( resto )
    contador[valor] = cantidad;
    resto -= cantidad * valor;
    console.log( resto )
  }

  // Paso 3: devolvemos el array en orden ascendente [1,2,5,10,20,50]
  return [1, 2, 5, 10, 20, 50].map(v => contador[v]);
}
console.log(getCoins(16))
// getCoins(51); // [1, 0, 0, 0, 0, 1] -> una moneda de 1 c√©ntimo y otra de 50 c√©ntimos
// getCoins(3); // [1, 1, 0, 0, 0, 0] -> una moneda de 1 c√©ntimo y otra de 2
// getCoins(5); // [0, 0, 1, 0, 0, 0] -> una moneda de 5 c√©ntimos
// getCoins(16); // [1, 0, 1, 1, 0, 0] -> una moneda de 1 c√©ntimo, una de 5 y una de 10
// getCoins(100); // [0, 0, 0, 0, 0, 2] -> dos monedas de 50 c√©ntimos
