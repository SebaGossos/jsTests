// En el taller de Santa üéÖ se est√°n preparando los trineos de motor el√©ctrico para poder hacer la ruta perfecta para dejar los regalos.

// La ruta empieza en el punto 0 y de ah√≠ va hacia la derecha en l√≠nea recta.

// El Keanu Relfes üßù nos ha preparado una lista de obst√°culos a evitar. El problema es que nos ha dado la lista de posiciones de los obst√°culos desordenada... üòÖ aunque al menos nunca la posici√≥n 0 puede tener un obst√°culo.

// Encima, el trineo s√≥lo se puede configurar para saltar un n√∫mero fijo de posiciones... üò±

// Necesitamos una funci√≥n que nos diga la longitud m√≠nima del salto del trineo para ir evitando todos los obst√°culos en la ruta.

// // S es salto, X es obst√°culo
// /* As√≠ quedar√≠a la representaci√≥n:
// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
// .  .  .  X  .  X  X  X  .  X  .
// S-----------S-----------S-------
// */

// /* As√≠ quedar√≠a la representaci√≥n:
// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
// .  .  X  .  X  .  X  .  X  .  X
// S--------------------S---------

// // Longitudes de salto:
// // 1 caer√≠a en el 2
// // 2 caer√≠a en el 2
// // 3 caer√≠a en el 6
// // 4 caer√≠a en el 4
// // 5 caer√≠a en el 10
// // 6 caer√≠a en el 6
// // 7 es el ideal!!! ‚úÖ

// getMinJump([1, 2, 3, 5]) // -> 4
// getMinJump([3, 7, 5]) // -> 2
// getMinJump([9, 5, 1]) // -> 2
// */
// La dificultad del reto est√° en pensar que s√≥lo podemos configurar el salto del trineo una vez y que buscamos el salto m√≠nimo que nos servir√≠a para sortear todos los obstaculos.

export default function getMinJump(obstacles) {
  // 1) Creamos un Set para consultas r√°pidas
  const obsSet = new Set(obstacles);
  // 2) Calculamos hasta d√≥nde podr√≠amos necesitar probar
  const maxPos = Math.max(...obstacles);

  console.log(maxPos)
  // 3) Probamos saltos crecientes
  for (let S = 1; S <= maxPos + 1; S++) {
    let collision = false;
    // 4) Recorremos m√∫ltiplos de S desde S hasta maxPos
    for (let pos = S; pos <= maxPos; pos += S) {
      if (obsSet.has(pos)) {
        collision = true;
        break;
      }
    }
    // 5) Si no hubo colisi√≥n, S es nuestro resultado
    if (!collision) {
      return S;
    }
  }
  // En teor√≠a nunca llegamos aqu√≠, pero por seguridad:
  return maxPos + 1;
}


// const obstacles = [5, 3, 6, 7, 9];
// console.log('la respuesta es:',getMinJump(obstacles)); // -> 4
const obstacles2 = [2, 4, 6, 8, 10];
console.log('la respuesta es:',getMinJump(obstacles2));
